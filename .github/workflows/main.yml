name: build & push (classic docker cli)

# run on push to "main" branch
on:
  push:
    branches: ["main"]

# set environment variable for the docker image name
env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/dummy-app

jobs:  #1 job = run sequentially, no parallely
  docker:   # job name

    # specify the runner os
    runs-on: ubuntu-latest

    permissions:
      contents: write    # allow job to write git tags to the repo
      packages: write    # allow job to push docker images to registry

    steps:
      # checkout repo 
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0    # fetch all history and tags

      # fetch all remote tags 
      - name: fetch all tags
        run: git fetch --tags --force --prune

      # detect the latest version tag using semantic versioning 
      - name: detect latest version
        id: cur
        run: |
          latest=$(git tag --list | sort -V | tail -n1)   # sort tags, get highest
          echo "tag=${latest:-1.0.0}" >>"$GITHUB_OUTPUT"  # default to 1.0.0 if none

      # bump the patch version 
      - name: bump patch
        id: bump
        uses: christian-draeger/increment-semantic-version@1.2.3
        with:
          current-version: ${{ steps.cur.outputs.tag }}    # use detected version
          version-fragment: patch                          # bump patch number

      # create and push new git tag if it doesn’t already exist
      - name: create & push git tag
        env:
          NEW: ${{ steps.bump.outputs.next-version }}
        run: |
          if git rev-parse -q --verify "refs/tags/$NEW" >/dev/null; then
            echo "tag $NEW already exists – skipping."   # avoid duplicate tags
            exit 0
          fi
          git tag "$NEW"                                # create new tag
          git push origin "$NEW"                        # push tag to remote

      # login to docker hub using cli and secrets
      - name: docker hub login
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" |
             docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # build docker image and tag it 
      - name: build image
        run: |
          docker build -t $IMAGE_NAME:${{ steps.bump.outputs.next-version }} \
                       -t $IMAGE_NAME:latest .

      # push both to docker hub
      - name: push image
        run: |
          docker push $IMAGE_NAME:${{ steps.bump.outputs.next-version }}
          docker push $IMAGE_NAME:latest
