name: Build & Push Docker image

on:
  push:
    branches: ["main"]

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/dummy-app   # e.g. myuser/dummy-app

jobs:
  docker:
    runs-on: ubuntu-latest

    # Only the rights this job really needs
    permissions:
      contents: write     # create + push tags
      packages: write     # docker/login-action pushes images

    steps:
      # 1 Checkout **full** history so we can inspect tags
      - uses: actions/checkout@v4          # token defaults to ${{ github.token }} :contentReference[oaicite:0]{index=0}
        with:
          fetch-depth: 0

      # 2 Make sure every remote tag is present locally
      - name: Fetch all tags
        run: git fetch --tags --force --prune         # downloads + prunes tags :contentReference[oaicite:1]{index=1}

      # 3 Detect the latest *semantic-version* tag in the repo
      - name: Detect latest version
        id: cur
        run: |
          latest=$(git tag --list | sort -V | tail -n1)   # sort -V => 1.2.9 < 1.2.10 :contentReference[oaicite:2]{index=2}
          echo "tag=${latest:-1.0.0}" >>"$GITHUB_OUTPUT"  # default first release

      # 4 Bump the **patch** part (1.0.0 → 1.0.1 …)
      - name: Bump patch
        id: bump
        uses: christian-draeger/increment-semantic-version@1.2.3   # numeric tag, no “v” :contentReference[oaicite:3]{index=3}
        with:
          current-version: ${{ steps.cur.outputs.tag }}
          version-fragment: patch

      # 5 Create the new tag **only if it doesn’t exist**
      - name: Create & push tag
        env:
          NEW: ${{ steps.bump.outputs.next-version }}
        run: |
          if git rev-parse -q --verify "refs/tags/$NEW" >/dev/null; then   # collision test :contentReference[oaicite:4]{index=4}
            echo "Tag $NEW already exists – skipping."
            exit 0
          fi
          git tag "$NEW"
          git push origin "$NEW"            # needs contents:write :contentReference[oaicite:5]{index=5}

      # 6 Log in to Docker Hub
      - name: Docker Hub login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 7 Build & push a multi-stage image
      - name: Build & push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.bump.outputs.next-version }}
            ${{ env.IMAGE_NAME }}:latest
